Advanced Intermediate (31-40):

    Recursive Factorial Calculator

    Fibonacci Sequence (Recursive & Iterative)

    GCD using Euclidean Algorithm

    Reverse a String (Recursively)

    Check if a Number is a Power of Two

    Merge Two Sorted Arrays

    Matrix Multiplication

    Check Anagrams (Strings)

    Find Missing Number in an Array (1 to N)

    Implement a Stack (Array/Linked List)

Advanced (41-50):

    Implement a Queue (Array/Linked List)

    Binary Search (Iterative & Recursive)

    Insertion Sort Implementation

    Selection Sort Implementation

    Check Balanced Parentheses (Stack)

    Tower of Hanoi (Recursive Solution)

    Linked List Operations (Insert, Delete, Traverse)

    Count Words in a Text File

    Find First Non-Repeating Character in a String

    Calculate Power of a Number (Recursive & Iterative)

Expert (51-60):

    Quick Sort Implementation

    Merge Sort Implementation

    Binary Search Tree (BST) Operations

    Detect Cycle in a Linked List

    Reverse a Linked List (Iterative & Recursive)

    Find All Permutations of a String

    N-Queens Problem (Backtracking)

    Kadane’s Algorithm (Max Subarray Sum)

    Dijkstra’s Shortest Path Algorithm (Graphs)

    Knapsack Problem (Dynamic Programming)

Master Level (61-70):

    Implement a Hash Table (Chaining/Open Addressing)

    AVL Tree Insertion & Deletion

    Heap Sort Implementation

    Topological Sort (Graphs)

    Floyd-Warshall Algorithm (All-Pairs Shortest Path)

    A Pathfinding Algorithm*

    Red-Black Tree Insertion

    Trie Implementation (Prefix Tree)

    Longest Common Subsequence (LCS - DP)

    Traveling Salesman Problem (TSP - DP Approach)